import itertools
import random


class Minesweeper():
    """
    Minesweeper game representation
    """

    def __init__(self, height=8, width=8, mines=8):

        # Set initial width, height, and number of mines
        self.height = height
        self.width = width
        self.mines = set()

        # Initialize an empty field with no mines
        self.board = []
        for i in range(self.height):
            row = []
            for j in range(self.width):
                row.append(False)
            self.board.append(row)

        # Add mines randomly
        while len(self.mines) != mines:
            i = random.randrange(height)
            j = random.randrange(width)
            if not self.board[i][j]:
                self.mines.add((i, j))
                self.board[i][j] = True

        # At first, player has found no mines
        self.mines_found = set()

    def print(self):
        """
        Prints a text-based representation
        of where mines are located.
        """
        for i in range(self.height):
            print("--" * self.width + "-")
            for j in range(self.width):
                if self.board[i][j]:
                    print("|X", end="")
                else:
                    print("| ", end="")
            print("|")
        print("--" * self.width + "-")

    def is_mine(self, cell):
        i, j = cell
        return self.board[i][j]

    def nearby_mines(self, cell):
        """
        Returns the number of mines that are
        within one row and column of a given cell,
        not including the cell itself.
        """

        # Keep count of nearby mines
        count = 0

        # Loop over all cells within one row and column
        for i in range(cell[0] - 1, cell[0] + 2):
            for j in range(cell[1] - 1, cell[1] + 2):

                # Ignore the cell itself
                if (i, j) == cell:
                    continue

                # Update count if cell in bounds and is mine
                if 0 <= i < self.height and 0 <= j < self.width:
                    if self.board[i][j]:
                        count += 1

        return count

    def won(self):
        """
        Checks if all mines have been flagged.
        """
        return self.mines_found == self.mines


class Sentence():
    """
    Logical statement about a Minesweeper game
    A sentence consists of a set of board cells,
    and a count of the number of those cells which are mines.
    """

    def __init__(self, cells, count):
        self.cells = set(cells)
        self.count = count

    def __eq__(self, other):
        return self.cells == other.cells and self.count == other.count

    def __str__(self):
        return f"{self.cells} = {self.count}"

    def known_mines(self):
        """
        Returns the set of all cells in self.cells known to be mines.
        """
        if len(self.cells) == self.count: # If remaining unknown cells is = mines count, It means all cells is mines
            return self.cells             # return these cells and 
        return set()

    def known_safes(self):
        """
        Returns the set of all cells in self.cells known to be safe.
        """
        if self.count == 0:
            return self.cells
        return set()

    def mark_mine(self, cell):
        """
        Updates internal knowledge representation given the fact that
        a cell is known to be a mine.
        """
        raise NotImplementedError

    def mark_safe(self, cell):
        """
        Updates internal knowledge representation given the fact that
        a cell is known to be safe.
        """
        raise NotImplementedError


class MinesweeperAI():
    """
    Minesweeper game player
    """

    def __init__(self, height=8, width=8):

        # Set initial height and width
        self.height = height
        self.width = width

        # Keep track of which cells have been clicked on
        self.moves_made = set()

        # Keep track of cells known to be safe or mines
        self.mines = set()
        self.safes = set()

        # List of sentences about the game known to be true
        self.knowledge = []

    def mark_mine(self, cell):
        """
        Marks a cell as a mine, and updates all knowledge
        to mark that cell as a mine as well.
        """
        self.mines.add(cell)
        for sentence in self.knowledge:
            sentence.mark_mine(cell)

    def mark_safe(self, cell):
        """
        Marks a cell as safe, and updates all knowledge
        to mark that cell as safe as well.
        """
        self.safes.add(cell)
        for sentence in self.knowledge:
            sentence.mark_safe(cell)

    def add_knowledge(self, cell, count):
        """
        Called when the Minesweeper board tells us, for a given
        safe cell, how many neighboring cells have mines in them.

        This function should:
            1) mark the cell as a move that has been made
            2) mark the cell as safe
            3) add a new sentence to the AI's knowledge base
               based on the value of `cell` and `count`
            4) mark any additional cells as safe or as mines
               if it can be concluded based on the AI's knowledge base
            5) add any new sentences to the AI's knowledge base
               if they can be inferred from existing knowledge
        """
        HEIGHT = 8
        WIDTH = 8
        MINES = 8

        # 1) mark the cell as a move that has been made
            # Let the computer know that this cell has been explored
        self.moves_made.add(cell)

        # 2) mark the cell as safe
            # And this cell not make the game over
        self.safes.add(cell)

        # 3) add a new sentence to the AI's knowledge base based on the value of `cell` and `count`
            # If the cell is (3,3), We want to add all the cells around it 
                # "(2, 2), (2, 3), (2, 4), (3, 2), (3, 4), (4, 2), (4, 3), (4, 4)"


        ############### Generate all cell's neighbour (x, y) ###############
        neighbours = set()

        # Using the loop to do the math to get neighbour around the cell(3,3)
        # [(2,2), (2,3), (2,4)]                                 # [(-1,-1), (0,0), (1,1)]
        # [(3,2), (3,3), (3,4)]                                 # [(-1,-1), (0,0), (1,1)]
        # [(4,2), (4,3), (4,4)]                                 # [(-1,-1), (0,0), (1,1)]
                                                                # ------------ If the cell is (3,3) ------------  # ############ The cell itself(3,3) ############)
        for neighbour_x in [-1, 0, 1]:                          # x = -1, y = -1                                  # x = 0, y = 0
            for neighbour_y in [-1, 0, 1]:                      # cell[0][1] = (3, 3)                             # cell[0][1] = (3, 3)
                neighbour_row = cell[0] + neighbour_x           # cell[0]: 3 + x: -1 = row: 2                     # cell[0]: 3 + x: 0 = row: 3
                neighbour_col = cell[1] + neighbour_y           # cell[1]: 3 + y: -1 = col: 2                     # cell[1]: 3 + y: 0 = col: 3
                                                                # neighbour_row = 2, neighbour_col = 2            # neighbour_row = 3, neighbour_col = 3
                if (0 <= neighbour_row < HEIGHT and             # 0 <= 2 < HEIGHT                                 # 0 <= 3 < HEIGHT
                    0 <= neighbour_col < WIDTH and              # 0 <= 2 < WIDTH                                  # 0 <= 3 < WIDTH 
                    (neighbour_x, neighbour_y)!= (0, 0)):       # (-1, -1)!= (0, 0)) # false                      # (0, 0)!= (0, 0)) # true
                    # skips the iteration the cell itself(3,3)      # it means not the cell itself                      # it means the cell itself
                                                                # ----------------------------------------------  # ########################################

                    # Check if the cell(e.g. (2,2)) is in `mark_safe` or `mark_mine` 
                        # if not, add to `neighbours`
                    if not self.safes((neighbour_row, neighbour_col)) and not self.mines((neighbour_row, neighbour_col)):
                        neighbours.add((neighbour_row, neighbour_col))
                        
        # When finish the cell(3,3) process 
            # Adding a new sentence("(2, 2), (2, 3),...) to the knowledge base(self.knowledge)
                # Turn(neighbours, count) to a Sentence() objects
                # Then add it into `self.knowledge`
                    # So you can access the attributes (cells and count) in the step 4
        self.knowledge.append(Sentence(neighbours, count))
            # When you click the cell, if it is not mine, it will give you a number(that is the "count")
                # It is telling you how many mine around you


        # 4) mark any additional cells as safe or as mines if it can be concluded based on the AI's knowledge base
            # `.cells` and `.count` is come from `self.knowledge.append(Sentence(neighbours, count))`
        
        for sentence in self.knowledge:
            ###### All neighbours is mine ######
            if len(sentence.cells) == sentence.count:       # [X, X, X]
                for cell in sentence.cells:                 # [X, 8, X] # 8 means all neighbours is mine
                    self.mark_mine(cell)                    # [X, X, X]
                        # Let say if we processed 8 cells, and the "count" also is 8, then we know that all is mine
                        # Add cell 1 by 1 into `mark_mine`
            
            ###### No neighbours is mine ######
            elif sentence.count == 0:                       # [X, X, X]
                for cell in sentence.cells:                 # [X, 0, X] # 0 means no neighbours is mine
                    self.mark_safe(cell)                    # [X, X, X]
                    # Add cell 1 by 1 into `mark_safe` 

            ###### Some neighbours is mine ######
                # [(2,2), (2,3), (2,4)] 
                # [(3,2),   2,   (3,4)]  # 2 means there is 2 mine he
                # [(4,2), (4,3), (4,4)] 


            # 5) add any new sentences to the AI's knowledge base if they can be inferred from existing knowledge
            else:                                                  
                for sen_A in range(len(self.knowledge)):                # Assume this is 3 sentences here   
                    sentence_1 = self.knowledge[sen_A]                  # sentence1 = [(2,2), (2,3), (2,4)]

                    for sen_B in range(sen_A+1, len(self.knowledge)): 
                        sentence_2 = self.knowledge[sen_B]              # sentence2 = [(4,2), (4,3), (4,4)]
                        # Then we need to compare sentences 1 by 1 like the following
                            # "Comparing Sentence 1 ([(2, 2), (2, 3), (2, 4)]) with Sentence 3 ([(4,2), (4,3), (4,4)])"
                
                        ###### Compare sentences ######
                        ### Use the Python build-in funciton `.issubset()` ###
                            # to check whether one set is a subset of another set
                            # Assume we have a knowledge_base
                                #   Sentence({(2,2), (2,3)}, 1),                 # Sentence 1
                                #   Sentence({(2,2), (2,3), (2,4)}, 2),         # Sentence 2
                                #   Sentence({(4,2), (4,3), (4,4)}, 1),         # Sentence 3
                        if set(sentence_1.cells).issubset(set(sentence_2.cells)):
                        # (sentence_1.cells:({(2,2), (2,3)}, 1).issubset(sentence_2.cells:({(2,2), (2,3), (2,4)}, 2)
                            new_cells = set(sentence_2.cells) - set(sentence_1.cells)   # new_cells:{(2, 4)}
                            new_count = sentence_2.count - sentence_1.count            # new_count:1 (2-1)
                            new_sentence = Sentence(new_cells, new_count)              # new_sentence: Cells: {(2, 4)}, Count: 1

                        elif set(sentence_2.cells).issubset(set(sentence_1.cells)):
                            new_cells = set(sentence_1.cells) - set(sentence_2.cells)  # same as above that how it works
                            new_count = sentence_1.count - sentence_2.count
                            new_sentence = Sentence(new_cells, new_count)

                        if new_sentence and new_sentence not in self.knowledge: # if `new_sentence` is not None and not in the knowledge base
                            self.knowledge.append(new_sentence)





    def make_safe_move(self):
        """
        Returns a safe cell to choose on the Minesweeper board.
        The move must be known to be safe, and not already a move
        that has been made.

        This function may use the knowledge in self.mines, self.safes
        and self.moves_made, but should not modify any of those values.
        """
        #TODO
        raise NotImplementedError

    def make_random_move(self):
        """
        Returns a move to make on the Minesweeper 
        """